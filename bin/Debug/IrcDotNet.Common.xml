<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IrcDotNet.Common</name>
    </assembly>
    <members>
        <member name="T:IrcDotNet.Common.Collections.CollectionsUtilities">
            <summary>
            Contains common utilities for functionality relating to collections.
            </summary>
        </member>
        <member name="M:IrcDotNet.Common.Collections.CollectionsUtilities.Set``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Sets the value for the specified key in a dictionary.
            If the given key already exists, overwrite its value; otherwise, add a new key/value pair.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary..</typeparam>
            <param name="dictionary">The dictionary in which to set the value.</param>
            <param name="key">The object to use as the key of the element to add/update.</param>
            <param name="value">The object to use as the value of the element to add/update.</param>
        </member>
        <member name="M:IrcDotNet.Common.Collections.CollectionsUtilities.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the specified items to the collection.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="collection">The collection to which to add the items.</param>
            <param name="range">A collection of items to add to <paramref name="collection"/>.</param>
        </member>
        <member name="M:IrcDotNet.Common.Collections.CollectionsUtilities.RemoveRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes the specified items from the collection.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="collection">The collection fom which to remove the items.</param>
            <param name="range">A collection of items to remove from <paramref name="collection"/>.</param>
        </member>
        <member name="M:IrcDotNet.Common.Collections.CollectionsUtilities.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the specified action on each item in the collection.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="source">The collection on whose items to perform the action.</param>
            <param name="action">The action to perform on each item of the collection.</param>
        </member>
        <member name="T:IrcDotNet.Common.Collections.ReadOnlySet`1">
            <summary>
            Represents a read-only set of values.
            </summary>
            <typeparam name="T">The type of elements in the set.</typeparam>
        </member>
        <member name="M:IrcDotNet.Common.Collections.ReadOnlySet`1.#ctor(System.Collections.Generic.ISet{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:IrcDotNet.Common.Collections.ReadOnlySet`1"/> class.
            </summary>
            <param name="set">The set to wrap.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:IrcDotNet.Common.Collections.ReadOnlySet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the set is a proper subset of the specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true"/> if the set is a proper subset of <paramref name="other"/>;
            <see langword="false"/>, otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:IrcDotNet.Common.Collections.ReadOnlySet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the set is a proper superset of the specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true"/> if the set is a proper superset of <paramref name="other"/>;
            <see langword="false"/>, otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:IrcDotNet.Common.Collections.ReadOnlySet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the set is a subset of the specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true"/> if the set is a subset of <paramref name="other"/>;
            <see langword="false"/>, otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:IrcDotNet.Common.Collections.ReadOnlySet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the set is a superset of the specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true"/> if the set is a superset of <paramref name="other"/>;
            <see langword="false"/>, otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:IrcDotNet.Common.Collections.ReadOnlySet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the set and the specified collection share common elements.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true"/> if the set and <paramref name="other"/> share at least one common element;
            <see langword="false"/>, otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:IrcDotNet.Common.Collections.ReadOnlySet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the set and the specified collection contain the same elements.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true"/> if the set and <paramref name="other"/> are equal;
            <see langword="false"/>, otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:IrcDotNet.Common.Collections.ReadOnlySet`1.Contains(`0)">
            <summary>
            Determines whether the set contains the specified element.
            </summary>
            <param name="item">The element to locate in the set.</param>
            <returns><see langword="true"/> if the set contains the specified element;
            <see langword="false"/>, otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:IrcDotNet.Common.Collections.ReadOnlySet`1.CopyTo(`0[])">
            <inheritdoc cref="M:IrcDotNet.Common.Collections.ReadOnlySet`1.CopyTo(`0[],System.Int32)"/>
        </member>
        <member name="M:IrcDotNet.Common.Collections.ReadOnlySet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the set to an array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the
            set. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="arrayIndex"/> is greater than the length of the
            destination array.</exception>
        </member>
        <member name="M:IrcDotNet.Common.Collections.ReadOnlySet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the set.
            </summary>
            <returns>An enumerator for the set.</returns>
        </member>
        <member name="P:IrcDotNet.Common.Collections.ReadOnlySet`1.Count">
            <summary>
            Gets the number of elements that are contained in the set.
            </summary>
            <value>The number of elements that are contained in the set.</value>
        </member>
        <member name="T:IrcDotNet.Common.Collections.ReadOnlyDictionary`2">
            <summary>
            Represents a read-only collection of keys and values.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="M:IrcDotNet.Common.Collections.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:IrcDotNet.Common.Collections.ReadOnlyDictionary`2"/> class.
            </summary>
            <param name="dictionary">The dictionary to wrap.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:IrcDotNet.Common.Collections.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the dictionary contains the specified key.
            </summary>
            <param name="key">The key to locate in the dictionary.</param>
            <returns><see langword="true"/> if the dictionary contains an element with the specified key;
            <see langword="false"/>, otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:IrcDotNet.Common.Collections.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the
            key is found; otherwise, the default value for the type of the value parameter. This parameter is passed
            uninitialized.</param>
            <returns><see langword="true"/> if the dictionary contains an element with the specified key;
            <see langword="false"/>, otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:IrcDotNet.Common.Collections.ReadOnlyDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the dictionary.
            </summary>
            <returns>An enumerator for the dictionary.</returns>
        </member>
        <member name="P:IrcDotNet.Common.Collections.ReadOnlyDictionary`2.Keys">
            <summary>
            Gets a collection containing the keys in the dictionary.
            </summary>
            <value>A collection containing the keys in the dictionary.</value>
        </member>
        <member name="P:IrcDotNet.Common.Collections.ReadOnlyDictionary`2.Values">
            <summary>
            Gets a collection containing the values in the dictionary.
            </summary>
            <value>A collection containing the values in the dictionary.</value>
        </member>
        <member name="P:IrcDotNet.Common.Collections.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <value>The element with the specified key.</value>
            <exception cref="T:System.NotSupportedException">This operation is not supported on a read-only dictionary.
            </exception>
        </member>
        <member name="P:IrcDotNet.Common.Collections.ReadOnlyDictionary`2.Count">
            <summary>
            Gets the number of key/value pairs contained in the dictionary.
            </summary>
            <value>The number of key/value pairs contained in the dictionary.</value>
        </member>
    </members>
</doc>
